import Head from "next/head";
import Image from "next/image";
import { useEffect, useRef, useState } from "react";
import useSWR, { mutate } from "swr";
import { get, post } from "../libs/fetcher";
import styles from "../styles/Home.module.css";
import { Howl, Howler } from "howler";
// import mp3 from "../demo/shit.mp3";
import { map, T, F, over, lensProp, find, propEq, isNil } from "ramda";

import ControlPanel from "../components/ControlPanel";
import PlayList, { PlayListData, PlaylistItem } from "../components/PlayList";
import useMusicStore from "../store";

// function blobToArrayBuffer(blob) {
//   return new Promise((resolve, reject) => {
//     const reader = new FileReader();
//     reader.addEventListener("loadend", (e) => {
//       resolve(reader.result);
//     });
//     reader.addEventListener("error", reject);
//     reader.readAsArrayBuffer(blob);
//   });
// }

let mapList = (item: PlaylistItem) =>
  map((it: PlaylistItem) => {
    return over(lensProp("isPlaying"), it === item ? T : F, it);
  });

export default function Home() {
  const { data: filesList } = useSWR("/api/getFiles");
  const { playList } = useMusicStore();
  const setPlayList = useMusicStore((s) => s.setPlayList);
  const [showPlayList, setShowPlayList] = useState(false);
  const [liveHowl, setLiveHowl] = useState<Howl>();

  const [liveAudioUrl, setLiveAudioUrl] = useState<string>();

  // const playingItem = find(propEq("isPlaying", true), playList);

  // change playingItem
  // const clickItemHandler = (item: PlaylistItem) => {
  //   setPlayList(mapList(item));
  // };

  // change PlayList when filesList changed
  useEffect(() => {
    if (!filesList) {
      return;
    }

    setPlayList(
      filesList.files.map((item: any) => ({
        id: item.id,
        name: item.name,
        src: item["@microsoft.graph.downloadUrl"],
      }))
    );
  }, [filesList]);

  // download and play when playing item changed
  // useEffect(() => {
  //   if (!playingItem) {
  //     return;
  //   }

  //   // let audio: Howl;
  //   // let isCanceled = false;

  //   // get(playingItem.src, {
  //   //   responseType: "arraybuffer",
  //   //   onDownloadProgress: (progressEvent) => {
  //   //     if (isCanceled) {
  //   //       return;
  //   //     }
  //   //   },
  //   // }).then((res: any) => {
  //   //   if (isCanceled) {
  //   //     return;
  //   //   }

  //   //   const blob = new Blob([res.data], { type: "audio/mpeg" });
  //   //   const audioUrl = URL.createObjectURL(blob);
  //   //   setLiveAudioUrl(audioUrl);
  //   // });

  //   return () => {
  //     isCanceled = true;
  //   };
  // }, [playingItem]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="w-full h-full ">
        <ControlPanel
          audioUrl={liveAudioUrl}
          musicTitle={""}
          onPause={() => {}}
          onPlay={() => {}}
        ></ControlPanel>
        {playList && (
          <PlayList
            playListData={playList}
            // onClickItem={clickItemHandler}
          ></PlayList>
        )}
      </main>
    </>
  );
}
