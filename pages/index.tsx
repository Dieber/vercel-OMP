import Head from "next/head";
import Image from "next/image";
import { useEffect, useRef, useState } from "react";
import useSWR from "swr";
import { post } from "../libs/fetcher";
import styles from "../styles/Home.module.css";
import { Howl, Howler } from "howler";
import {
  map,
  T,
  F,
  prop,
  o,
  ifElse,
  over,
  lensProp,
  set,
  find,
  propEq,
} from "ramda";

type PlayList = Array<{
  howl: Howl;
  isPlaying: boolean;
  id: string;
  name: string;
  src: string;
}>;

let eq = (a) => (b) => {
  return a === b;
};

let mapList = (item) =>
  map((it) => {
    return over(lensProp("isPlaying"), it === item ? T : F, it);
  });

// const incCount = R.ifElse(
//   R.has('count'),
//   R.over(R.lensProp('count'), R.inc),
//   R.assoc('count', 1)
// );
// incCount({ count: 1 }); //=> { count: 2 }
// incCount({});           //=> { count: 1 }

// const incCount = R.ifElse(
//   R.has('count'),
//   R.over(R.lensProp('count'), R.inc),
//   R.assoc('count', 1)
// );

export default function Home() {
  // let audioDom = useRef<HTMLAudioElement>(null)!;

  const { data: filesList } = useSWR("/api/getFiles");
  const [musicList, setMusicList] = useState<PlayList>([]);

  const playingItem = find(propEq("isPlaying", true))(musicList); //=> {a: 2}

  const clickItemHandler = (item) => {
    setMusicList(mapList(item));
  };

  useEffect(() => {
    if (!filesList) {
      return;
    }
    setMusicList(
      filesList.files.map((item) => ({
        howl: new Howl({
          src: [item["@microsoft.graph.downloadUrl"]],
          html5: true,
        }),
        isPlaying: false,
        id: item.id,
        name: item.name,
        src: item["@microsoft.graph.downloadUrl"],
      }))
    );
  }, [filesList]);

  useEffect(() => {
    if (!playingItem) {
      return;
    }

    playingItem.howl.play();

    return () => {
      playingItem.howl.stop();
      // musicList.forEach((item) => {
      //   item.howl.stop();
      // });
    };

    // musicList.forEach((item) => {
    //   item.isPlaying ? item.howl.play() : item.howl.stop();
    // });
  }, [playingItem]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {musicList.length !== 0 &&
          musicList.map((item) => {
            return (
              <div key={item.id}>
                <div
                  className="cursor-pointer"
                  onClick={(e) => {
                    clickItemHandler(item);
                    // item.howl.play();
                  }}
                >
                  {item.name}
                </div>
              </div>
            );
          })}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
